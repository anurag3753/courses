1. !!   :- This is used to run the last command
        :- Ex. 
            apt-get install pyyaml      [ without sudo ]. If it turns out that u need to run this with sudo, you can do sth like
            sudo !!

2. Difference b/w sh and .
    - sh file executes a shell-script file in a new shell process.
        Ex. If you execute `sh test.sh` :- you'd launch a new shell, then define a new variable inside it, then exit.
            The variable used inside test will not set in the outer shell.

    - . file executes a shell-script file in the current shell process.
        Ex. If you execute `sh test.sh` :- you'd execute the script using the current shell. The result of test
            will be accessible in the current shell.

    - ./file will execute the file in the current directory. The file needs to have the executable flag set.
        Ex. If you launch it using ./test.sh, the first line `#!/bin/sh` would be detected , then it would be exactly as 
        if you wrote
                        /bin/sh ./test.sh
        which in this case boils down to the first scenario. But if the hashbang line was, for example,

                        #!/usr/bin/python

        the file would have been executed with `/usr/bin/python ./test.sh`

3. There is two terminology in shell. One is flag and other is options. With options you need to mention something, where as
   with flags you do not need to mention anything
   Ex. ls -ltr [ all the things are flags]
       mkdir   [ it needs input from user]

4. ! carries a special meaning, if used directly inside the shell

5. Sudo usage :-
    echo 3 | sudo tee brightness.txt

6. tail is used to print last lines of an output

7. grep -i `search_string`      # i is ignore-case

8. If you are a root user, then your prompt looks like (#) . In rest cases ($)

9. find . -type f -iname "brightness*"